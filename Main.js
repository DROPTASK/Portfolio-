/// main.js let coins = [] let portfolio = JSON.parse(localStorage.getItem("portfolio")) || {} let balance = parseFloat(localStorage.getItem("balance")) || 100000 let selectedCoin = null let isDark = false

const listEl = document.getElementById("coin-list") const balanceEl = document.getElementById("balance") const modal = document.getElementById("tradeModal") const tradeTitle = document.getElementById("tradeTitle") const tradeAmount = document.getElementById("tradeAmount") const confirmTrade = document.getElementById("confirmTrade") const cancelTrade = document.getElementById("cancelTrade") const themeToggle = document.getElementById("themeToggle") const themeIcon = document.getElementById("themeIcon") const portfolioView = document.getElementById("portfolioView") const portfolioCards = document.getElementById("portfolioCards") const addCustomBtn = document.getElementById("addCustomCoin") const customModal = document.getElementById("customModal") const customAddress = document.getElementById("customAddress") const confirmCustom = document.getElementById("confirmCustom") const cancelCustom = document.getElementById("cancelCustom")

async function fetchCoins() { const res = await fetch( https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false ) const page1 = await res.json() const page2 = await (await fetch(https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=2)).json() const page3 = await (await fetch(https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=3)).json() const page4 = await (await fetch(https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=4)).json() coins = [...page1, ...page2, ...page3, ...page4] renderCoins(coins) }

function renderCoins(data) { listEl.innerHTML = "" data.forEach((coin) => { const el = document.createElement("div") el.className = "glass p-4 rounded-xl shadow hover:scale-105 transition cursor-pointer" el.innerHTML = <div class="flex justify-between items-center"> <div class="flex gap-2 items-center"> <img src="${coin.image}" class="w-8 h-8 rounded-full"/> <div> <div class="font-bold">${coin.name}</div> <div class="text-sm text-gray-600">${coin.symbol.toUpperCase()}</div> </div> </div> <div class="text-right"> <div class="font-semibold text-lg">$${coin.current_price}</div> <div class="text-sm ${coin.price_change_percentage_24h > 0 ? 'text-green-600' : 'text-red-500'}"> ${coin.price_change_percentage_24h?.toFixed(2)}% </div> </div> </div> <div class="flex gap-2 mt-4"> <button class="buy-btn bg-green-500 text-white px-3 py-1 rounded" data-id="${coin.id}">Buy</button> <button class="sell-btn bg-red-500 text-white px-3 py-1 rounded" data-id="${coin.id}">Sell</button> </div> listEl.appendChild(el) }) }

listEl.addEventListener("click", (e) => { if (e.target.classList.contains("buy-btn") || e.target.classList.contains("sell-btn")) { const id = e.target.getAttribute("data-id") selectedCoin = coins.find((c) => c.id === id) tradeTitle.innerText = ${e.target.classList.contains("buy-btn") ? "Buy" : "Sell"} ${selectedCoin.name} confirmTrade.setAttribute("data-action", e.target.classList.contains("buy-btn") ? "buy" : "sell") modal.classList.remove("hidden") } })

confirmTrade.onclick = () => { const amt = parseFloat(tradeAmount.value) if (!amt || !selectedCoin) return const action = confirmTrade.getAttribute("data-action") const qty = amt / selectedCoin.current_price portfolio[selectedCoin.id] = portfolio[selectedCoin.id] || { ...selectedCoin, qty: 0 }

if (action === "buy" && balance >= amt) { portfolio[selectedCoin.id].qty += qty balance -= amt } else if (action === "sell" && portfolio[selectedCoin.id]?.qty >= qty) { portfolio[selectedCoin.id].qty -= qty balance += amt } if (portfolio[selectedCoin.id].qty <= 0) delete portfolio[selectedCoin.id] localStorage.setItem("portfolio", JSON.stringify(portfolio)) localStorage.setItem("balance", balance) balanceEl.innerText = balance.toFixed(2) modal.classList.add("hidden") tradeAmount.value = "" renderPortfolio() }

cancelTrade.onclick = () => modal.classList.add("hidden")

function renderPortfolio() { portfolioCards.innerHTML = "" Object.values(portfolio).forEach((coin) => { const val = coin.qty * coin.current_price const el = document.createElement("div") el.className = "glass p-4 rounded-xl" el.innerHTML = <div class="flex items-center gap-3"> <img src="${coin.image}" class="w-10 h-10 rounded-full" /> <div> <div class="font-bold text-lg">${coin.name}</div> <div class="text-sm text-gray-600">${coin.symbol.toUpperCase()}</div> </div> </div> <div class="mt-2 text-sm">Qty: ${coin.qty.toFixed(4)}</div> <div class="font-bold text-green-600 text-xl mt-1">$${val.toFixed(2)}</div> portfolioCards.appendChild(el) }) }

// Tabs const tabs = document.querySelectorAll(".tab") tabs.forEach(tab => { tab.addEventListener("click", () => { tabs.forEach(t => t.classList.remove("tab-active")) tab.classList.add("tab-active") const name = tab.getAttribute("data-tab") portfolioView.classList.toggle("hidden", name !== "portfolio") listEl.classList.toggle("hidden", name === "portfolio") if (name === "hot") renderCoins(coins.slice(0, 50)) if (name === "gainers") renderCoins([...coins].sort((a, b) => b.price_change_percentage_24h - a.price_change_percentage_24h).slice(0, 50)) if (name === "losers") renderCoins([...coins].sort((a, b) => a.price_change_percentage_24h - b.price_change_percentage_24h).slice(0, 50)) if (name === "portfolio") renderPortfolio() }) })

themeToggle.onclick = () => { isDark = !isDark document.body.classList.toggle("bg-white", !isDark) document.body.classList.toggle("bg-gray-900", isDark) document.body.classList.toggle("text-white", isDark) themeIcon.className = isDark ? "fas fa-sun" : "fas fa-moon" }

addCustomBtn.onclick = () => customModal.classList.remove("hidden") confirmCustom.onclick = async () => { const ca = customAddress.value.trim() if (!ca) return const res = await fetch(https://api.coingecko.com/api/v3/coins/ethereum/contract/${ca}) const data = await res.json() coins.unshift({ id: data.id, name: data.name, symbol: data.symbol, image: data.image.small, current_price: data.market_data.current_price.usd, price_change_percentage_24h: data.market_data.price_change_percentage_24h }) renderCoins(coins.slice(0, 50)) customModal.classList.add("hidden") customAddress.value = "" } cancelCustom.onclick = () => customModal.classList.add("hidden")

fetchCoins() balanceEl.innerText = balance.toFixed(2) renderPortfolio()

